/*----------------------------------------------------------------------------
 *
 * {{ports.interface_name}}
 *
 *----------------------------------------------------------------------------
 */
 
interface {{ports.interface_name}}
  #(
    parameter int pAddressWidth = {{ports.address_bus_width}},
    parameter int pDataWidth = {{ports.data_bus_width}}
    )
   (
    input logic               {{CLK}},   // Input clock
    input logic               {{RST}}   // Reset
    );

   logic [pAddressWidth-1:0]  {{ADDR}};  // Address
   logic [(pDataWidth/8)-1:0] {{BE}};    // Byte enables
   logic                      {{WR}};    // Write strobe
   logic                      {{RD}};    // Read strobe
   logic [pDataWidth-1:0]     {{WDATA}}; // Write data
   logic [pDataWidth-1:0]     {{RDATA}}; // Read data
   logic                      {{ACK}};   // Acknowledge

   modport {{ports.modport_name}}
     (
      input  {{CLK}},
      input  {{RST}},
      input  {{ADDR}},
      input  {{WR}},
      input  {{RD}},
      input  {{BE}},
      input  {{WDATA}},
      output {{RDATA}},
      output {{ACK}}
      );

   modport {{ports.imodport_name}}
     (
      input  {{CLK}},
      input  {{RST}},
      output {{ADDR}},
      output {{WR}},
      output {{RD}},
      output {{BE}},
      output {{WDATA}},
      input  {{RDATA}},
      input  {{ACK}}
      );

{% if options["bool:assert"] %}

   // synopsys translate_off

   /*-------------------------------------------------------------------------
    * 
    * Check the protocol of the interface
    *
    *-------------------------------------------------------------------------
    */

   ERR_WR_RD_NOT_CONCURRENT:
     assert property
       (@(posedge {{CLK}}) disable iff ({{RESET_CONDITION}})
        (!({{WR}} | {{RD}})))
        else $error("{{WR}} and {{RD}} must not be asserted at the same time");

   ERR_UNEXPECTED_ACK:
     assert property
       (@(posedge {{CLK}}) disable iff ({{RESET_CONDITION}})
        {{ACK}} |-> ({{RD}} | {{WR}}))
        else $error("{{ACK}} asserted while {{RD}} and {{WR}} are deasserted");       

   ERR_EARLY_RD_DEASSERTION:
     assert property
      (@(posedge {{CLK}}) disable iff ({{RESET_CONDITION}})
       (!{{RD}} & $past({{RD}}, 1)) |-> $past({{ACK}}, 1))
       else $error("{{RD}} deasserted before {{ACK}} asserted");

   ERR_EARLY_WR_DEASSERTION:
     assert property
      (@(posedge {{CLK}}) disable iff ({{RESET_CONDITION}})
       (!{{WR}} & $past({{WR}}, 1)) |-> $past({{ACK}}, 1))
       else $error("{{WR}} deasserted before {{ACK}} asserted");

   ERR_WDATA_NOT_STABLE:
     assert property
      (@(posedge {{CLK}}) disable iff ({{RESET_CONDITION}})
       ({{WR}} & !{{ACK}}) |=> (WDATA == $past(WDATA)))
       else $error("WDATA was not stable while {{WR}} asserted");

   ERR_WR_{{ADDR}}_STABLE:
     assert property
      (@(posedge {{CLK}}) disable iff ({{RESET_CONDITION}})
       ({{WR}} & !{{ACK}}) |=> ({{ADDR}} == $past({{ADDR}})))
     else $error("{{ADDR}} was not stable while {{WR}} asserted");

   ERR_WR_BE_STABLE:
     assert property
      (@(posedge {{CLK}}) disable iff ({{RESET_CONDITION}})
       ({{WR}} & !{{ACK}}) |=> (BE == $past(BE)))
       else $error("BE was not stable while {{WR}} asserted");

   ERR_RD_{{ADDR}}_STABLE:
     assert property
      (@(posedge {{CLK}}) disable iff ({{RESET_CONDITION}})
       ({{RD}} & !{{ACK}}) |=> ({{ADDR}} == $past({{ADDR}})))
     else $error("{{ADDR}} was not stable while {{RD}} asserted");

   ERR_RDATA_UNKNOWN:
     assert property
      (@(posedge {{CLK}}) disable iff ({{RESET_CONDITION}})
       ({{RD}} & {{ACK}}) |-> (!$isunknown({{RDATA}})))
       else $warning("{{RDATA}} is unknown when {{RD}} and {{ACK}} asserted");

   ERR_WDATA_UNKNOWN:
     assert property
      (@(posedge {{CLK}}) disable iff ({{RESET_CONDITION}})
       ({{WR}}) |-> (!$isunknown({{WDATA}})))
       else $warning("{{WDATA}} is unknown when {{WR}} asserted");

   ERR_BE_UNKNOWN:
     assert property
      (@(posedge {{CLK}}) disable iff ({{RESET_CONDITION}})
       ({{WR}}) |-> (!$isunknown({{BE}})))
       else $warning("{{BE}} is unknown when {{WR}} asserted");

   ERR_ADDR_UNKNOWN:
     assert property
      (@(posedge {{CLK}}) disable iff ({{RESET_CONDITION}})
       ({{WR}} | {{RD}}) |-> (!$isunknown({{ADDR}})))
       else $warning("{{ADDR}} is unknown when {{WR}} or {{RD}} asserted");

   ERR_WR_LATE_ACK:
     assert property
      (@(posedge {{CLK}}) disable iff (!{{RESET_CONDITION}})
       ($rose({{WR}})) |-> (##[1:20] {{ACK}}))
       else $warning("{{ACK}} not asserted within 20 clocks of {{WR}}");

   ERR_RD_LATE_ACK:
     assert property
      (@(posedge {{CLK}}) disable iff ({{RESET_CONDITION}})
       ($rose({{RD}})) |-> (##[1:20] {{ACK}}))
       else $warning("{{ACK}} not asserted within 20 clocks of {{RD}}");

   // synopsys translate_on
{% endif %}

endinterface : {{ports.interface_name}}
