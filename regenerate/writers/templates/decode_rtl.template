{# -*- mode: Jinja2;-*- #}
//-----------------------------------------------------------------------------
//
// File       : {{GROUP}}_decode.sv
//
//-----------------------------------------------------------------------------

// spyglass disable_block W240

module {{GROUP}}_decode
  (
{% for inst in ext_insts %}
  {% if inst.repeat > 1 and not inst.single_decode %}
    {% if flatten %}
      {% for i in range(inst.repeat) %}
   {{inst.db.ports.interface_name}}.{{inst.db.ports.imodport_name}} MGMT_{{inst.inst|upper}}_{{i}},
      {% endfor %}
    {% else %}
   {{inst.db.ports.interface_name}}.{{inst.db.ports.imodport_name}} MGMT_{{inst.inst|upper}}[{{inst.repeat}}],
    {% endif %}
  {% else %}
   {{inst.db.ports.interface_name}}.{{inst.db.ports.imodport_name}} MGMT_{{inst.inst|upper}},
  {% endif %}
{% endfor %}
   mgmt_interface.target MGMT_MAIN
   );

   genvar                   i;
   logic                    rw_delay;

   /*--------------------------------------------------------------------
    *
    * Register block decoding
    *
    *--------------------------------------------------------------------
    */
{% for inst in ext_insts %}
   {% set select = "sel_" + inst.inst | lower %}
   {% set addr = "MGMT_MAIN.ADDR[%d:3]" % (REG_ADDR_WIDTH - 1,) %}
   {% if inst.upper > inst.offset %}
     {% set limit = inst.offset %}
   {% else %}
     {% set limit = inst.upper %}
   {% endif %}
   {% if inst.repeat > 1 %}
     {% if inst.single_decode %}
   wire {{select}} = {{addr}} >= 'h{{"%x" % inst.lower}} && {{addr}} < 'h{{"%x" % (inst.lower + (inst.repeat * inst.offset),)}};
     {% else %}
       {% for i in range(inst.repeat) %}
         {% set bar = inst.lower + (i * inst.offset) %}
   wire {{select}}{{i}} = {{addr}} >= 'h{{"%x" % bar}} && {{addr}} < 'h{{"%x" % (bar + limit,)}};
       {% endfor %}
     {% endif %}
   {% else %}
   wire {{select}} = {{addr}} >= 'h{{"%x" % inst.lower}} && {{addr}} < 'h{{"%x" % inst.upper}};
   {% endif %}
{% endfor %}

   // Output port assignments

{% for inst in ext_insts %}
  // {{inst}}
  {% if inst.repeat > 1 and not inst.single_decode %}
    {% for i in range(inst.repeat) %}
      {% if flatten %}
   assign MGMT_{{inst.inst|upper}}_{{i}}.{{inst.db.ports.address_bus_name}} = MGMT_MAIN.ADDR;
   assign MGMT_{{inst.inst|upper}}_{{i}}.{{inst.db.ports.write_data_name}} = MGMT_MAIN.WDATA;
   assign MGMT_{{inst.inst|upper}}_{{i}}.{{inst.db.ports.byte_strobe_name}} = MGMT_MAIN.BE;
   assign MGMT_{{inst.inst|upper}}_{{i}}.{{inst.db.ports.read_data_name}} = MGMT_MAIN.RD & sel_{{inst.inst|lower}}{{i}};
   assign MGMT_{{inst.inst|upper}}_{{i}}.{{inst.db.ports.write_strobe_name}} = MGMT_MAIN.WR & sel_{{inst.inst|lower}}{{i}};
      {% else %}
   assign MGMT_{{inst.inst|upper}}[{{i}}].{{inst.db.ports.address_bus_name}} = MGMT_MAIN.ADDR;
   assign MGMT_{{inst.inst|upper}}[{{i}}].{{inst.db.ports.write_data_name}} = MGMT_MAIN.WDATA;
   assign MGMT_{{inst.inst|upper}}[{{i}}].{{inst.db.ports.byte_strobe_name}} = MGMT_MAIN.BE;
   assign MGMT_{{inst.inst|upper}}[{{i}}].{{inst.db.ports.read_strobe_name}} = MGMT_MAIN.RD & sel_{{inst.inst|lower}}{{i}};
   assign MGMT_{{inst.inst|upper}}[{{i}}].{{inst.db.ports.write_strobe_name}} = MGMT_MAIN.WR & sel_{{inst.inst|lower}}{{i}};
      {% endif %}
    {% endfor %}
  {% else %}
   assign MGMT_{{inst.inst|upper}}.{{inst.db.ports.address_bus_name}} = MGMT_MAIN.ADDR;
   assign MGMT_{{inst.inst|upper}}.{{inst.db.ports.write_data_name}} = MGMT_MAIN.WDATA;
   assign MGMT_{{inst.inst|upper}}.{{inst.db.ports.byte_strobe_name}} = MGMT_MAIN.BE;
   assign MGMT_{{inst.inst|upper}}.{{inst.db.ports.read_strobe_name}} = MGMT_MAIN.RD & sel_{{inst.inst|lower}};
   assign MGMT_{{inst.inst|upper}}.{{inst.db.ports.write_strobe_name}} = MGMT_MAIN.WR & sel_{{inst.inst|lower}};
  {% endif %}
{% endfor %}

  /*--------------------------------------------------------------------
   *
   * Read data selection
   *
   *--------------------------------------------------------------------
   */
   always_comb begin
{% for inst in ext_insts %}
  {% set outer_loop = loop %}
  {% if inst.repeat > 1 and not inst.single_decode %}
    {% for i in range(inst.repeat) %}
      {% if outer_loop.index0 == 0 and i == 0 %}
      unique if (sel_{{inst.inst|lower}}{{i}}) begin
      {% else %}
      end else if (sel_{{inst.inst|lower}}{{i}}) begin
      {% endif %}
      {% if flatten %}
         MGMT_MAIN.RDATA = MGMT_{{inst.inst|upper}}_{{i}}.{{inst.db.ports.read_data_name}};
      {% else  %}
         MGMT_MAIN.RDATA = MGMT_{{inst.inst|upper}}[{{i}}].{{inst.db.ports.read_data_name}};
      {% endif %}
    {% endfor %}
  {% else %}
    {% if loop.index0 == 0 %}
      unique if (sel_{{inst.inst|lower}}) begin
    {% else %}
      end else if (sel_{{inst.inst|lower}}) begin
    {% endif %}
         MGMT_MAIN.RDATA = MGMT_{{inst.inst|upper}}.{{inst.db.ports.read_data_name}};
  {% endif %}
{% endfor %}
      end else begin
         MGMT_MAIN.RDATA = 64'hdead_beef_dead_beef;
      end
   end

  /*--------------------------------------------------------------------
   *
   * ACK selection
   *
   *--------------------------------------------------------------------
   */
   always_comb begin
{% for inst in ext_insts %}
  {% set outer_loop = loop %}
  {% if inst.repeat > 1 and not inst.single_decode %}
    {% for i in range(inst.repeat) %}
      {% if outer_loop.index0 == 0 and i == 0 %}
      unique if (sel_{{inst.inst|lower}}{{i}}) begin
      {% else %}
      end else if (sel_{{inst.inst|lower}}{{i}}) begin
      {% endif %}
      {% if flatten %}
         MGMT_MAIN.ACK = MGMT_{{inst.inst|upper}}_{{i}}.{{inst.db.ports.acknowledge_name}};
      {% else %}
         MGMT_MAIN.ACK = MGMT_{{inst.inst|upper}}[{{i}}].{{inst.db.ports.acknowledge_name}};
      {% endif %}
    {% endfor %}
  {% else %}
    {% if loop.index0 == 0 %}
      unique if (sel_{{inst.inst|lower}}) begin
    {% else %}
      end else if (sel_{{inst.inst|lower}}) begin
    {% endif %}
         MGMT_MAIN.ACK = MGMT_{{inst.inst|upper}}.{{inst.db.ports.acknowledge_name}};
  {% endif %}
{% endfor %}
      end else begin
         MGMT_MAIN.ACK = rw_delay & (MGMT_MAIN.RD | MGMT_MAIN.WR);
      end
   end

   always_ff @(posedge MGMT_MAIN.CLK or negedge MGMT_MAIN.RSTn) begin
      if (~MGMT_MAIN.RSTn) begin
         rw_delay <= 1'b0;
      end else begin
         rw_delay <= MGMT_MAIN.RD | MGMT_MAIN.WR;
      end
   end

endmodule : {{GROUP}}_decode

// spyglass enable_block W240
