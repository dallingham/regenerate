// Author: {{db.owner}}
// Block: {{db.module_name}}
//
// ----------------------------------------------------------------------
// Functional Description
//
//   Provides a block of registers and their associated input and output
//   signals
// ----------------------------------------------------------------------
//
// Copyright 2016 {{db.organization}}. All rights reserved.
//
//
//
module {{db.module_name}}
{% if parameters|length > 0 %}
   #(
{%   for p in parameters %}
{%     if p[0] == p[1] %}
    parameter bit {{p[2]}}{% if not loop.last %},{% endif %}

{%     else %}
    parameter bit [{{p[0]}}:{{p[1]}}] {{p[2]}}{% if not loop.last %},{% endif %}

{%     endif %}
{%   endfor %}
    )
{% endif %}
   (
{% if db.use_interface %}
{%  set clk_name = "MGMT.CLK" %}
{%  set reset_name = "MGMT.RSTn" %}
{%  set write_strobe_name = "MGMT.WR" %}
{%  set read_strobe_name = "MGMT.RD" %}
{%  set byte_strobe_name = "MGMT.BE" %}
{%  set write_data_name = "MGMT.WDATA" %}
{%  set read_data_name = "MGMT.RDATA" %}
{%  set acknowledge_name = "MGMT.ACK" %}
{%  set address_bus_name = "MGMT.ADDR[%d:3]" | format(db.address_bus_width-1) %}
{% else %}
{%  set clk_name = db.clock_name %}
{%  set reset_name = db.reset_name %}
{%  set write_strobe_name = db.write_strobe_name %}
{%  set read_strobe_name = db.read_strobe_name %}
{%  set byte_strobe_name = db.byte_strobe_name %}
{%  set write_data_name = db.write_data_name %}
{%  set read_data_name = db.read_data_name %}
{%  set acknowledge_name = db.acknowledge_name %}
{%  set address_bus_name = db.address_bus_name %}
    {{input_logic}}          {{clk_name}},
    {{input_logic}}          {{reset_name}},
    {{input_logic}}          {{write_strobe_name}},
    {{input_logic}}          {{read_strobe_name}},
{% set text = "[%d:0]"|format((db.data_bus_width/8) - 1) %}
    {{input_logic}} {{"%-8s"|format(text)}} {{byte_strobe_name}},
{% set text = "[%d:%d]"|format((db.address_bus_width-1), LOWER_BIT[db.data_bus_width]) %}
    {{input_logic}} {{"%-8s"|format(text)}} {{address_bus_name}},
{% set text = "[%d:0]"|format(db.data_bus_width - 1) %}
    {{input_logic}} {{"%-8s"|format(text)}} {{write_data_name}},
{% endif %}
{% set ctrl = {} %}
{% for reg in sorted_regs %}
{%   for field in reg.get_bit_fields() %}
{%     set ci = cell_info[field.field_type] %}
{%     if ci.has_control and field.control_signal not in ctrl -%}
{%       set _dummy = ctrl.update({field.control_signal:1}) %}
{%       if reg.dimension > 1 %}
    {{input_logic}}          {{field.control_signal}}[{{reg.dimension}}],
{%       else %}
    {{input_logic}}          {{field.control_signal}},
{%       endif %}
{%-    endif -%}
{%-  endfor -%}
{% endfor %}
{% for reg in sorted_regs %}
{%   for field in reg.get_bit_fields() %}
{%     set ci = cell_info[field.field_type] %}
{%     if ci.has_input and field.input_signal != "" and field.input_signal not in ctrl-%}
{%       set _dummy = ctrl.update({field.input_signal:1}) %}
{%       if field.msb == field.lsb %}
{%         if reg.dimension > 1 %}
{%         set text = "[%d:0]"|format(reg.dimension) %}
    {{input_logic}} {{text}} {{field.input_signal}},
{%         else %}
    {{input_logic}}          {{field.input_signal}},
{%         endif %}
{%       else %}
{%         set text = "[%d:%d]"|format(field.msb, field.lsb) %}
{%         if reg.dimension > 1 %}
    {{input_logic}} {{"%-8s"|format(text)}} {{field.input_signal}}[{{reg.dimension}}],
{%         else %}
    {{input_logic}} {{"%-8s"|format(text)}} {{field.input_signal}},
{%         endif %}
{%       endif %}
{%-    endif -%}
{%-  endfor -%}
{% endfor %}
{% for reg in sorted_regs %}
{%   if not reg.do_not_generate_code %}
{%     for field in reg.get_bit_fields() %}
{%       set ci = cell_info[field.field_type] %}
{%       if ci.has_oneshot -%}
{%         if reg.dimension > 1 %}
    {{output_logic}}          {{field.output_signal}}_1S[{{reg.dimension}}],
{%         else %}
    {{output_logic}}          {{field.output_signal}}_1S,
{%         endif %}
{%-      endif -%}
{%-    endfor -%}
{%-  endif -%}
{% endfor %}
{% for (sig, index, dim) in output_ports %}
{%   if dim > 1 %}
    {{output_logic}} {{"%-8s"|format(index)}} {{sig}}[{{dim}}],
{%   else %}
    {{output_logic}} {{"%-8s"|format(index)}} {{sig}},
{%   endif %}
{% endfor %}
{% set text = "[%d:0]"|format(db.data_bus_width-1) %}
{% if db.use_interface %}
    mgmt_interface.target MGMT
{% else %}
    {{output_logic}} {{"%-8s"|format(text)}} {{read_data_name}},
    {{output_logic}}          {{acknowledge_name}}
{% endif %}
   );

/*
 * Register Declarations
 */
{% for addr, val in word_fields|dictsort %}
{%   for (field, start_offset, stop_offset, start_pos, stop_pos, faddr, reg) in val %}
{%     if reg.share == 0 %}
{%       set mode = "_" %}
{%     elif reg.share == 1 %}
{%       set mode = "_r_" %}
{%     else %}
{%       set mode = "_w_" %}
{%     endif %}
{%     if field.msb == field.lsb %}
   {{reg_type}} r{{"%02x"|format(reg.address)}}{{mode}}{{field.field_name|lower}};
{%     else %}
   {{reg_type}} [{{field.msb}}:{{field.lsb}}] r{{"%02x"|format(reg.address)}}{{mode}}{{field.field_name|lower}};
{%     endif %}
{%     set ci = cell_info[field.field_type] %}
{%     if ci.has_oneshot %}
{%       for b in break_into_bytes(field.lsb, field.msb) %}
   {{reg_type}} r{{"%02x"|format(reg.address)}}{{mode}}{{field.field_name|lower}}_{{b[0]}}_1S;
{%       endfor %}
{%     endif %}
{%   endfor %}
{% endfor %}
   {{reg_type}} prev_write;
   {{reg_type}} prev_read;
   {{reg_type}} [{{db.data_bus_width-1}}:0] mux_rdata;

/*
 * Address Selects
 */
{% for addr,val in word_fields|dictsort %}
   wire write_r{{"%02x"|format(addr)}} = (~prev_write & {{write_strobe_name}}) & ({{address_bus_name}} == {{db.address_bus_width - LOWER_BIT[db.data_bus_width]}}'h{{"%x"|format(rshift(addr, LOWER_BIT[db.data_bus_width]))}});
{% endfor %}
{% for addr, val in word_fields|dictsort %}
{%   set force_r = False %}
{%   for (field, start_offset, stop_offset, start_pos, stop_pos, faddr, reg) in val if cell_info[field.field_type].has_rd %}
{%     if loop.first %}
   wire read_r{{"%02x"|format(addr)}} = (~prev_read & {{read_strobe_name}}) & ({{address_bus_name}} == {{db.address_bus_width - LOWER_BIT[db.data_bus_width]}}'h{{"%x"|format(rshift(addr, LOWER_BIT[db.data_bus_width]))}});
{%     endif %}
{%   endfor %}
{% endfor %}

/*
 * Output Assignments
 */
{% for addr, val in word_fields|dictsort %}
{%   for (f, start_offset, stop_offset, start_pos, stop_pos, faddr, reg) in val %}
{%     if cell_info[f.field_type][3] %}
   assign {{f.output_signal}}_1S{% if reg.dimension >= 0 %}[{{reg.dimension}}]{% endif %} = {% for b in break_into_bytes(f.lsb, f.msb) -%}r{{"%02x"|format(reg.address)}}_{{f.field_name|lower}}_{{b[0]}}_1S{% if loop.last %};{% else %} | {% endif %}{% endfor %}

{%     endif %}
{%   endfor %}
{% endfor %}
{% for addr, val in word_fields|dictsort %}
{%   for (f, start_offset, stop_offset, start_pos, stop_pos, faddr, reg) in val %}
{%      if reg.share == 0 %}
{%        set mode = "_" %}
{%      elif reg.share == 1 %}
{%        set mode = "_r_" %}
{%      else %}
{%        set mode = "_w_" %}
{%      endif %}
{%      if f.use_output_enable and f.output_signal != "" %}
{%        if reg.dimension != -1 %}
   assign {{f.output_signal}}[{{reg.dimension}}] = r{{"%02x"|format(reg.address)}}{{mode}}{{f.field_name|lower}};
{%        else %}
   assign {{f.resolved_output_signal()}} = r{{"%02x"|format(reg.address)}}{{mode}}{{f.field_name|lower}};
{%        endif %}
{%      endif %}
{%   endfor %}
{% endfor %}
   assign {{read_data_name}} = mux_rdata;
{% for addr, val in word_fields|dictsort %}
{%   for (field, start_offset, stop_offset, start_pos, stop_pos, faddr, reg) in val %}
{%     if reg.share == 0 %}
{%       set mode = "_" %}
{%     elif reg.share == 1 %}
{%       set mode = "_r_" %}
{%     else %}
{%       set mode = "_w_" %}
{%     endif %}
{% set ci = cell_info[field.field_type] %}
/*------------------------------------------------------------------------------
 *    Field       : {{field.field_name}}
 *    Type        : {{ci.type_descr}}
{%     if stop_pos == start_pos %}
 *    Bit         : {{start_pos}}
{% else %}
 *    Bits        : {{stop_pos}}:{{start_pos}}
{% endif %}
 *    Register    : {{reg.register_name}}
 *    Address     : {{"%08x"|format(reg.address)}}
{%     if field.reset_type == 0 %}
 *    Reset Value : {{field.width}}'h{{"%x"|format(field.reset_value)}}
{%     elif field.reset_type == 1 %}
 *    Reset Value : {{field.reset_input}}
{%     else %}
 *    Reset Value : {{field.reset_value}}
{%     endif %}
 *------------------------------------------------------------------------------
 */
{%   if field.field_type == 0 %}
    assign r{{"%02x"|format(reg.address)}}{{mode}}{{field.field_name|lower}} = {{full_reset_value(field)}};
{%   elif field.field_type == 1 %}
{%     if reg.dimension >= 0 %}
    assign r{{"%02x"|format(reg.address)}}{{mode}}{{field.field_name|lower}} = {{field.input_signal}}[{{reg.dimension}}];
{%     else %}
    assign r{{"%02x"|format(reg.address)}}_{{field.field_name|lower}} = {{field.input_signal}};
{%     endif %}
{%   else %}
{%     for start, stop in break_into_bytes(field.lsb, field.msb) %}
{%        set reg_start_bit = (reg.address * 8) % db.data_bus_width %}
{%        set bus_start = start % db.data_bus_width + reg_start_bit %}
{%        set bus_stop = stop % db.data_bus_width + reg_start_bit %}
   {{db.module_name}}_{{ci.name}}_reg
     #(
{%      if ci.allows_wide %}
       .WIDTH ({{stop - start + 1}}),
{%      endif %}
       .RVAL  ({{reset_value(field, start, stop)}})
       )
   r{{"%02x"|format(reg.address)}}{{mode}}{{field.field_name|lower}}_{{start}}
     (
      .CLK    ({{clk_name}}),
      .RSTn   ({{reset_name}}),
{%      if ci.is_read_only == False %}
      .WE     (write_r{{"%02x"|format(addr)}}),
{%        if bus_stop == bus_start %}
      .DI     ({{write_data_name}}[{{bus_start}}]),
{%        else %}
      .DI     ({{write_data_name}}[{{bus_stop}}:{{bus_start}}]),
{%        endif %}
      .BE     ({{byte_strobe_name}}[{{(bus_start/8)|int}}]),
{%      endif %}
{%      if ci.has_rd %}
      .RD     (read_r{{"%02x"|format(addr)}}),
{%      endif %}
{%      if ci.has_control %}
{%        if reg.dimension >= 0 %}
      .LD     ({{field.control_signal}}[{{reg.dimension}}]),
{%        else %}
      .LD     ({{field.control_signal}}),
{%        endif %}
{%      endif %}
{%      if ci.has_input %}
{%        if stop == start %}
{%          if reg.dimension >= 0 %}
      .IN     ({{field.input_signal}}[{{reg.dimension}}]),
{%          else %}
{%            if field.lsb == field.msb %}
      .IN     ({{field.input_signal}}),
{%            else %}
      .IN     ({{field.input_signal}}[{{start}}]),
{%            endif %}
{%          endif %}
{%        else %}
{%          if reg.dimension >= 0 %}
      .IN     ({{field.input_signal}}[{{reg.dimension}}][{{stop}}:{{start}}]),
{%          else %}
      .IN     ({{field.input_signal}}[{{stop}}:{{start}}]),
{%          endif %}
{%        endif %}
{%      endif %}
{%      if ci.has_oneshot %}
      .DO_1S  (r{{"%02x"|format(reg.address)}}{{mode}}{{field.field_name|lower}}_{{start}}_1S),
{%      endif %}
{%      if stop == start %}
{%        if field.lsb == field.msb %}
      .DO     (r{{"%02x"|format(reg.address)}}{{mode}}{{field.field_name|lower}})
{%        else %}
      .DO     (r{{"%02x"|format(reg.address)}}{{mode}}{{field.field_name|lower}}[{{start}}])
{%        endif %}
{%      else %}
      .DO     (r{{"%02x"|format(reg.address)}}{{mode}}{{field.field_name|lower}}[{{stop}}:{{start}}])
{%      endif %}
     );

{%     endfor %}
{%   endif %}
{%   endfor %}
{% endfor %}
/*------------------------------------------------------------------------------
 * Ensure that internal write is one clock wide
 *------------------------------------------------------------------------------
 */
   {{always}} @(posedge {{clk_name}} or {{reset_edge}} {{reset_name}}) begin
     if ({{reset_op}}{{reset_name}}) begin
        prev_write <= 1'b0;
        prev_read  <= 1'b0;
        {{acknowledge_name}} <= 1'b0;
     end else begin
        prev_write <= {{write_strobe_name}};
        prev_read  <= {{read_strobe_name}};
        {{acknowledge_name}} <= (~prev_write & {{write_strobe_name}}) | (~prev_read & {{read_strobe_name}});
     end
   end

/*------------------------------------------------------------------------------
 *
 * Register Read Output Assignments
 *
 *------------------------------------------------------------------------------
 */
{% for addr, val in word_fields|dictsort %}
{%-   set last = db.data_bus_width - 1 -%}
   wire [{{db.data_bus_width-1}}:0] r{{"%02x"|format(addr)}} = {
{%   for (field, start_offset, stop_offset, start_pos, stop_pos, faddr, reg) in val|reverse|drop_write_share %}{%    set width = stop_pos - start_pos + 1 %}
{%     if reg.share == 0 %}
{%       set mode = "_" %}
{%     elif reg.share == 1 %}
{%       set mode = "_r_" %}
{%     else %}
{%       set mode = "_w_" %}
{%     endif %}
{%     if reg.share != 2 %}
{%       if start_offset + width <= last %}
                  {{last - (start_offset + width) + 1}}'b0,
{%       endif %}
{%       if start_pos == stop_pos %}
                  r{{"%02x"|format(reg.address)}}{{mode}}{{field.field_name|lower}}{% if start_pos + start_offset != 0 %},{% endif %}
{%       else %}
                  r{{"%02x"|format(reg.address)}}{{mode}}{{field.field_name|lower}}[{{stop_pos}}:{{start_pos}}]{% if start_pos + start_offset != 0 %},{% endif %}
{%       endif %}

{%       set last = start_offset - 1 %}
{%       if loop.last and start_offset != 0 %}
                  {{start_offset}}'b0
{%       endif %}
{%     endif %}
{%   endfor %}
                  };
{% endfor %}

   {{always}} @(posedge {{clk_name}} or {{reset_edge}} {{reset_name}}) begin
      if ({{reset_op}}{{reset_name}}) begin
         mux_rdata <= 64'h0;
      end else begin
        if ({{read_strobe_name}}) begin
           unique case ({{address_bus_name}})
{% for addr, val in word_fields|dictsort %}
              {{db.address_bus_width - LOWER_BIT[db.data_bus_width]}}'h{{"%x"|format(rshift(addr, LOWER_BIT[db.data_bus_width]))}}: mux_rdata <= r{{"%02x"|format(addr)}};
{% endfor %}
              default: mux_rdata <= {{db.data_bus_width}}'h0;
           endcase
         end else begin
            mux_rdata <= {{db.data_bus_width}}'h0;
         end
      end
   end

endmodule


