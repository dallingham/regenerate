{# -*- mode: Jinja2;-*- #}
// Author: {{db.owner}}
// Block: {{db.name}}
// Generated: {{date}}
// Regenerate Version: {{version}}
//
// ----------------------------------------------------------------------
// Functional Description
//
//   Provides a block of registers and their associated input and output
//   signals
// ----------------------------------------------------------------------
//
// Copyright {{year}} {{db.organization}}. All rights reserved.
//
//

module {{db.name}}
{% if parameters|length > 0 %}
   #(
{%   for p in parameters %}
    parameter int {{p.name}} = {{"'h%x" % p.value}}{% if not loop.last %},{% endif %}

{%   endfor %}
    )
{% endif %}
   (
{% for signal in signal_list %}
    {{signal}}{% if not loop.last %},{% endif %}

{% endfor %}
   );

   genvar dim, bitpos;
   
/*
 * Register Declarations
 */
{% for reg in reg_list %}
   {{lang.reg_type}} {{reg.dimension}}{{reg.name}};
{% endfor %}
   {{lang.reg_type}} prev_write;
   {{lang.reg_type}} prev_read;
   {{lang.reg_type}} [{{db.ports.data_bus_width-1}}:0] mux_rdata;

{% for wire in reg_read_output %}
   wire {{wire.dim}} {{wire.name}};
{% endfor %}

/*
 * Address Selects
 */
   wire wr_strb = ~prev_write & {{ports.write_strobe}};
{% for data in write_address_selects %}
{%   if data.register.dimension.is_parameter %}
   wire {{data.name}}[{{data.register.dimension.param_name()}}];
{%-  else %}
   wire {{data.name}};
{%-  endif %}   
{% endfor %}
{% for data in read_address_selects %}
   wire {{data.name}};
{% endfor %}

{% for data in write_address_selects %}
{%   if data.register.dimension.is_parameter %}
   generate
      for (i=0 ; i < {{data.register.dimension.param_name()}}; i++) begin : g_{{data.name}}
         assign {{data.name}}[i] = wr_strb & ({{ports.addr}} == ({{data.addr}} + i));
      end
   endgenerate
{%   else %}
   assign {{data.name}} = wr_strb & ({{ports.addr}} == {{data.addr}});
{%   endif %}
{% endfor %}
{% for data in read_address_selects %}
{%   if data.register.dimension.is_parameter %}
   generate
      for (i=0 ; i < {{data.register.dimension.param_name()}}; i++) begin : g_{{data.name}}
         assign {{data.name}}[i] = (~prev_read & {{ports.read_strobe}}) & ({{ports.addr}} == ({{data.addr}} + i));
      end
   endgenerate
{%   else %}
   assign {{data.name}} = (~prev_read & {{ports.read_strobe}}) & ({{ports.addr}} == {{data.addr}});
{%   endif %}   
{% endfor %}

/*
 * Output Assignments
 */
{% for data in oneshot_assigns %}
   assign {{data.name}} = {{data.value}};
{% endfor %}
{% for data in assign_list %}
{%   if data.dimension == "" %}
   assign {{data.output}} = {{data.register}};
{%   else %}
   generate
      for (i = 0; i < {{data.dimension}}; i++) begin : g_{{data.register}}
         assign {{data.output}}[i] = {{data.register}}[i];
      end
   endgenerate
{%   endif %}
{% endfor %}
   assign {{ports.read_data}} = mux_rdata;

{% for ri in reg_data_list %}

/*------------------------------------------------------------------------------
 * Field       : {{ri.field.name}}
 * Type        : {{ri.type_descr}}
 * MSB         : {{ri.msb.int_decimal_str()}}
 * LSB         : {{ri.lsb}}
 * Register    : {{ri.reg_name}}
 * Address     : {{"%08x" % ri.reg_addr}}
 * Reset Value : {{ri.field.reset_string()}}
 *------------------------------------------------------------------------------
 */
 {% if ri.field.reset_type != 1 and ri.field.field_type != 1 %}  
 localparam bit [{{ri.msb.int_decimal_str()}}:{{ri.lsb}}] {{ri.rval}} = {{ri.field.reset_vstr()}};
 {% endif %}
{%   if ri.dim_param %}
generate 
   for (dim = 0; dim < {{ri.dim_param}}; dim++) begin : g_r{{"%02x" % ri.reg_addr}}

{%   endif %}
{%   if ri.field.field_type == 0 %}
 assign {{ri.name}}{{ri.dim}} = {{ri.rval}};

{%   elif ri.field.field_type == 1 %}
   assign {{ri.name}} = {{ri.input_name}};

{%   else %}
{%     if ri.generate %}  
generate
   for (bitpos = {{ri.lsb}}; bitpos <= {{ri.msb.int_decimal_str()}}; bitpos++) begin : g_{{ri.name}}

{%     endif %}
   {{ri.cell_type}} {{ri.name}}_reg
     (
      .CLK   ({{ports.clk}}),
      .{{RST}}  ({{ri.reset_name}}),
{%     if not ri.field.msb.is_parameter and ri.field.width == 1 %}
      .RVAL  ({{ri.field.reset_vstr()}}),
    {%-    else %}
      .RVAL  ({{ri.rval}}{{ri.pos}}),
{%-    endif %}
{%     if ri.write_name %}    
      .WE    ({{ri.write_name}}),
{%-    endif %}
{%     if ri.write_data_name %}    
      .DI    ({{ri.write_data_name}}),
{%     endif %}
{%     if ri.byte_strobe_name %}
      .BE    ({{ri.byte_strobe_name}}),
{%     endif %}
{%     if ri.read_name %}

      .RD    ({{ri.read_name}}),
{%     endif %}
{%     if ri.control_name %}
      .LD    ({{ri.control_name}}),
{%     endif %}
{%     if ri.input_name_bit %}
      .IN    ({{ri.input_name_bit}}),
{%     endif %}
{%     if ri.one_shot_name %}
      .DO_1S ({{ri.one_shot_name}}),
{%     endif %}
      .DO    ({{ri.do_name}})
     );
{%     if ri.generate == 1 %}    
    end
 endgenerate
{%     endif %}
{%   endif %}

{% endfor %}

/*------------------------------------------------------------------------------
 * Ensure that internal write is one clock wide
 *------------------------------------------------------------------------------
 */
{% if db.ports.sync_reset %}
   {{lang.always}} @(posedge {{ports.clk}}) begin
{% else %}
   {{lang.always}} @(posedge {{ports.clk}} or {{reset_edge}} {{ports.reset}}) begin
{% endif %}
     if ({{reset_op}}{{ports.reset}}) begin
        prev_write <= 1'b0;
        prev_read  <= 1'b0;
        {{ports.ack}} <= 1'b0;
     end else begin
        prev_write <= {{ports.write_strobe}};
        prev_read  <= {{ports.read_strobe}};
        {{ports.ack}} <= (~prev_write & {{ports.write_strobe}}) | (~prev_read & {{ports.read_strobe}});
     end
   end

/*------------------------------------------------------------------------------
 *
 * Register Read Output Assignments
 *
 *------------------------------------------------------------------------------
 */

{% for wire in reg_read_output %}
   assign {{wire.name}} = {
   {% for obj in wire.field_list %}
      {{obj}}{% if not loop.last %},{% endif %}

   {% endfor %}
   };

{% endfor %}
   {% set bit_width = db.ports.address_bus_width - low_bit %}
   
{% if db.ports.sync_reset %}
   {{lang.always}} @(posedge {{ports.clk}}) begin
{% else %}
   {{lang.always}} @(posedge {{ports.clk}} or {{reset_edge}} {{ports.reset}}) begin
{% endif %}
      if ({{reset_op}}{{ports.reset}}) begin
         mux_rdata <= '0;
      end else begin
         if ({{ports.read_strobe}}) begin
{% for addr, val in word_fields|dictsort %}
{%   if loop.first %}
            unique if ({{ports.addr}} == {{bit_width}}'h{{"%x"|format(rshift(addr, low_bit))}}) begin
{%-   else %}	   
            end else if ({{ports.addr}} == {{bit_width}}'h{{"%x"|format(rshift(addr, low_bit))}}) begin
{%-   endif %}	   
               mux_rdata <= r{{"%02x"|format(addr)}};
{%- endfor %}

            end else begin
	       mux_rdata <= {{db.ports.data_bus_width}}'h0;
            end
         end
      end
   end

endmodule
