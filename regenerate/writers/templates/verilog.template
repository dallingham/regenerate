// Author: {{db.owner}}
// Block: {{db.module_name}}
//
// ----------------------------------------------------------------------
// Functional Description
//
//   Provides a block of registers and their associated input and output
//   signals
// ----------------------------------------------------------------------
//
// Copyright 2016 {{db.organization}}. All rights reserved.
//
//
//
module {{db.module_name}}
{% if parameters|length > 0 %}
   #(
{%   for p in parameters %}
    parameter int {{p[2]}} = {{p[3]}}{% if not loop.last %},{% endif %}

{%   endfor %}
    )
{% endif %}
   (
{% if not db.use_interface %}
    {{input_logic}} {{ports['clk']}},
    {{input_logic}} {{ports['reset']}},
    {{input_logic}} {{ports['write_strobe']}},
    {{input_logic}} {{ports['read_strobe']}},
    {{input_logic}} {{port_width['byte_strobe']}} {{ports['byte_strobe']}},
    {{input_logic}} {{port_width['addr']}} {{ports['addr']}},
    {{input_logic}} {{port_width['write_data']}} {{ports['write_data']}},
{% endif %}
{% for (signal, vector) in input_signals %}
    {{input_logic}} {{vector}} {{signal}},
{% endfor %}
{% for (signal, vector) in output_signals %}
    {{output_logic}} {{vector}} {{signal}},
{% endfor %}
{% if db.use_interface %}
    mgmt_interface.target MGMT
{% else %}
    {{output_logic}} {{"[%d:0]"|format(db.data_bus_width-1)}} {{ports['read_data']}},
    {{output_logic}} {{ports['ack']}}
{% endif %}
   );

   genvar i;
   
/*
 * Register Declarations
 */
{% for r in reg_list %}
   {{reg_type}} {{r[1]}} {{r[0]}};
{% endfor %}
   {{reg_type}}          prev_write;
   {{reg_type}}          prev_read;
   {{reg_type}} [{{db.data_bus_width-1}}:0]   mux_rdata;

{% for wire_name, comp_list in reg_read_output %}
   wire {{wire_name[1]}} {{wire_name[0]}};
{% endfor %}

/*
 * Address Selects
 */
{% for data in write_address_selects %}
{%   if data[2].dimension_is_param() %}
   wire {{data[0]}}[{{data[2].dimension_str}}];
{%-   else %}
   wire {{data[0]}};
{%-   endif %}   
{% endfor %}
{% for data in read_address_selects %}
   wire {{data[0]}};
{% endfor %}

{% for data in write_address_selects %}
{%   if data[2].dimension_is_param() %}
   generate
      for (i=0 ; i < {{data[2].dimension_str}}; i++) begin : g_{{data[0]}}
         assign {{data[0]}}[i] = (~prev_write & {{ports['write_strobe']}}) & ({{ports['addr']}} == ({{data[1]}} + i));
      end
   endgenerate
{%   else %}
   assign {{data[0]}} = (~prev_write & {{ports['write_strobe']}}) & ({{ports['addr']}} == {{data[1]}});
{%   endif %}
{% endfor %}
{% for data in read_address_selects %}
{%   if data[2].dimension_is_param() %}
   generate
      for (i=0 ; i < {{data[2].dimension_str}}; i++) begin : g_{{data[0]}}
         assign {{data[0]}}[i] = (~prev_read & {{ports['read_strobe']}}) & ({{ports['addr']}} == ({{data[1]}} + i));
      end
   endgenerate
{%   else %}
   assign {{data[0]}} = (~prev_read & {{ports['read_strobe']}}) & ({{ports['addr']}} == {{data[1]}});
{%   endif %}   
{% endfor %}


/*
 * Output Assignments
 */
{% for data in oneshot_assigns %}
   assign {{data[0]}} = {{data[1]}};
{% endfor %}
{% for data in assign_list %}
{%   if data[2] == "" %}
   assign {{data[0]}} = {{data[1]}};
{%   else %}
   generate
      for (i = 0; i < {{data[2]}}; i++) begin : g_{{data[1]}}
         assign {{data[0]}}[i] = {{data[1]}}[i];
      end
   endgenerate
{%   endif %}
{% endfor %}
   assign {{ports['read_data']}} = mux_rdata;

{% for addr, val in word_fields|dictsort %}
{%   for (field, start_offset, stop_offset, start_pos, stop_pos, faddr, reg) in val %}
{%     set ci = cell_info[field.field_type] %}
/*------------------------------------------------------------------------------
 * Field       : {{field.field_name}}
 * Type        : {{ci.type_descr}}
{%     if stop_pos == start_pos %}
 * Bit         : {{start_pos}}
{% else %}
 * Bits        : {{stop_pos}}:{{start_pos}}
{% endif %}
 * Register    : {{reg.register_name}}
 * Address     : {{"%08x"|format(reg.address)}}
{%     if field.reset_type == 0 %}
 * Reset Value : {{field.width}}'h{{"%x"|format(field.reset_value)}}
{%     elif field.reset_type == 1 %}
 * Reset Value : {{field.reset_input}}
{%     else %}
 * Reset Value : {{field.reset_value}}
{%     endif %}
 *------------------------------------------------------------------------------
 */
{%   if reg.dimension_is_param() %}
generate
   for (i = 0; i < {{reg.dimension_str}}; i++) begin : g_r{{"%02x"|format(reg.address)}}
{%   endif %}

{%   if field.field_type == 0 %}
    assign {{reg_field_name(reg, field)}} = {{full_reset_value(field)}};

{%   elif field.field_type == 1 %}
{%     if reg.dimension >= 0 %}
    assign {{reg_field_name(reg, field)}} = {{field.input_signal}}[{{reg.dimension}}];

{%     else %}
    assign {{reg_field_name(reg, field)}} = {{field.input_signal}};

{%     endif %}
{%   else %}
{%     for start, stop in break_into_bytes(field.lsb, field.msb) %}
{%        set reg_start_bit = ((reg.address * 8) % db.data_bus_width) %}
{%        set bus_start = (start % db.data_bus_width) + reg_start_bit %}
{%        set bus_stop = (stop % db.data_bus_width) + reg_start_bit %}
   {{db.module_name}}_{{ci.name}}_reg
     #(
{%      if ci.allows_wide %}
       .WIDTH ({{stop - start + 1}}),
{%      endif %}
       .RVAL  ({{reset_value(field, start, stop)}})
       )
   {{reg_field_name(reg, field)}}_{{start}}
     (
      .CLK    ({{ports['clk']}}),
      .RSTn   ({{ports['reset']}}),
{%      if ci.is_read_only == False %}
{%         if reg.dimension_is_param() %}
      .WE     (write_r{{"%02x"|format(addr)}}[i]),
{%         else %}
      .WE     (write_r{{"%02x"|format(addr)}}),
{%         endif %}
{%        if bus_stop == bus_start %}
      .DI     ({{ports['write_data']}}[{{bus_start}}]),
{%        else %}
      .DI     ({{ports['write_data']}}[{{bus_stop}}:{{bus_start}}]),
{%        endif %}
      .BE     ({{ports['byte_strobe']}}[{{bus_start // 8}}]),
{%      endif %}
{%      if ci.has_rd %}
      .RD     (read_r{{"%02x"|format(addr)}}),
{%      endif %}
{%      if ci.has_control %}
{%        if reg.dimension_is_param() %}
      .LD     ({{field.control_signal}}[i]),
{%        elif reg.dimension >= 0 %}
      .LD     ({{field.control_signal}}[{{reg.dimension}}]),
{%        else %}
      .LD     ({{field.control_signal}}),
{%        endif %}
{%      endif %}
{%      if ci.has_input %}
{%        if stop == start %}
{%          if reg.dimension_is_param() %}
{%            if field.lsb == field.msb %}
      .IN     ({{field.input_signal}}[i]), // 1
{%            else %}      
      .IN     ({{field.input_signal}}[i][{{stop}}]), // 2
{%            endif %}      
{%          elif reg.dimension >= 0 %}
{%            if start == stop %}
{%               if field.lsb == field.msb %}
      .IN     ({{field.input_signal}}[{{reg.dimension}}]), //3
{%               else %}      
      .IN     ({{field.input_signal}}[{{reg.dimension}}][{{stop}}]), // 4
{%               endif %}      
{%            else %}      
      .IN     ({{field.input_signal}}[{{reg.dimension}}][{{stop}}:{{start}}]),  // 5
{%            endif %}      
{%          else %}
{%            if field.lsb == field.msb %}
      .IN     ({{field.input_signal}}),  // 6
{%            else %}
      .IN     ({{field.input_signal}}[{{start}}]), // 7
{%            endif %}
{%          endif %}
{%        else %}
{%          if reg.dimension_is_param() %}
      .IN     ({{field.input_signal}}[i][{{stop}}:{{start}}]), // 8
{%          elif reg.dimension >= 0 %}
      .IN     ({{field.input_signal}}[{{reg.dimension}}][{{stop}}:{{start}}]), // 9
{%          else %}
      .IN     ({{field.input_signal}}[{{stop}}:{{start}}]),  // 10
{%          endif %}
{%        endif %}
{%      endif %}
{%      if ci.has_oneshot %}
      .DO_1S  ({{reg_field_name(reg, field)}}_{{start}}_1S),
{%      endif %}
{%      if stop == start %}
{%        if field.lsb == field.msb %}
{%           if reg.dimension_is_param() %}
      .DO     ({{reg_field_name(reg, field)}}[i])
{%           else %}
      .DO     ({{reg_field_name(reg, field)}})
{%           endif %}
{%        else %}
{%           if reg.dimension_is_param() %}
      .DO     ({{reg_field_name(reg, field)}}[i][{{start}}])
{%           else %}
      .DO     ({{reg_field_name(reg, field)}}[{{start}}])
{%           endif %}
{%        endif %}
{%      else %}
{%         if reg.dimension_is_param() %}
      .DO     ({{reg_field_name(reg, field)}}[i][{{stop}}:{{start}}])
{%         else %}
      .DO     ({{reg_field_name(reg, field)}}[{{stop}}:{{start}}])
{%         endif %}
{%      endif %}
     );

{%     endfor %}
{%   if reg.dimension_is_param() %}
    end
 endgenerate
{%   endif %}
{%   endif %}
{%   endfor %}
{% endfor %}

/*------------------------------------------------------------------------------
 * Ensure that internal write is one clock wide
 *------------------------------------------------------------------------------
 */
   {{always}} @(posedge {{ports['clk']}} or {{reset_edge}} {{ports['reset']}}) begin
     if ({{reset_op}}{{ports['reset']}}) begin
        prev_write <= 1'b0;
        prev_read  <= 1'b0;
        {{ports['ack']}} <= 1'b0;
     end else begin
        prev_write <= {{ports['write_strobe']}};
        prev_read  <= {{ports['read_strobe']}};
        {{ports['ack']}} <= (~prev_write & {{ports['write_strobe']}}) | (~prev_read & {{ports['read_strobe']}});
     end
   end

/*------------------------------------------------------------------------------
 *
 * Register Read Output Assignments
 *
 *------------------------------------------------------------------------------
 */

{% for wire_name, comp_list in reg_read_output %}
   assign {{wire_name[1]}} = {
   {% for obj in comp_list %}
      {{obj}}{% if not loop.last %},{% endif %}

   {% endfor %}
   };

{% endfor %}
   {% set bit_width = db.address_bus_width - low_bit %}
   
   {{always}} @(posedge {{ports['clk']}} or {{reset_edge}} {{ports['reset']}}) begin
      if ({{reset_op}}{{ports['reset']}}) begin
         mux_rdata <= '0;
      end else begin
         if ({{ports['read_strobe']}}) begin
{% for addr, val in word_fields|dictsort %}
{%   if loop.first %}
            unique if ({{ports['addr']}} == {{bit_width}}'h{{"%x"|format(rshift(addr, low_bit))}}) begin
{%-   else %}	   
            end else if ({{ports['addr']}} == {{bit_width}}'h{{"%x"|format(rshift(addr, low_bit))}}) begin
{%-   endif %}	   
               mux_rdata <= r{{"%02x"|format(addr)}};
{%- endfor %}

            end else begin
	       mux_rdata <= '0;
            end
         end
      end
   end

endmodule


