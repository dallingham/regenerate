// Author: {{db.owner}}
// Block: {{db.name}}
// Generated: {{date}}
// Regenerate Version: {{version}}
//
// ----------------------------------------------------------------------
// Functional Description
//
//   Provides a block of registers and their associated input and output
//   signals
// ----------------------------------------------------------------------
//
// Copyright {{year}} {{db.organization}}. All rights reserved.
//
//
//
module {{db.name}}
{% if parameters|length > 0 %}
   #(
{%   for p in parameters %}
    parameter int {{p.name}} = {{p.value}}{% if not loop.last %},{% endif %}

{%   endfor %}
    )
{% endif %}
   (
{% for signal in signal_list %}
    {{signal}}{% if not loop.last %},{% endif %}

{% endfor %}
   );

   genvar dim, bitpos;
   
/*
 * Register Declarations
 */
{% for reg in reg_list %}
   {{lang.reg_type}} {{reg.dimension}}{{reg.name}};
{% endfor %}
   {{lang.reg_type}} prev_write;
   {{lang.reg_type}} prev_read;
   {{lang.reg_type}} [{{db.ports.data_bus_width-1}}:0] mux_rdata;

{% for wire in reg_read_output %}
   wire {{wire.dim}} {{wire.name}};
{% endfor %}

/*
 * Address Selects
 */
   wire wr_strb = ~prev_write & {{ports.write_strobe}};
{% for data in write_address_selects %}
{%   if data.register.dimension.is_parameter %}
   wire {{data.name}}[{{data.register.dimension.param_name()}}];
{%-   else %}
   wire {{data.name}};
{%-   endif %}   
{% endfor %}
{% for data in read_address_selects %}
   wire {{data.name}};
{% endfor %}

{% for data in write_address_selects %}
{%   if data.register.dimension.is_parameter %}
   generate
      for (i=0 ; i < {{data.register.dimension.param_name()}}; i++) begin : g_{{data.name}}
         assign {{data.name}}[i] = wr_strb & ({{ports.addr}} == ({{data.addr}} + i));
      end
   endgenerate
{%   else %}
   assign {{data.name}} = wr_strb & ({{ports.addr}} == {{data.addr}});
{%   endif %}
{% endfor %}
{% for data in read_address_selects %}
{%   if data.register.dimension.is_parameter %}
   generate
      for (i=0 ; i < {{data.register.dimension.param_name()}}; i++) begin : g_{{data.name}}
         assign {{data.name}}[i] = (~prev_read & {{ports.read_strobe}}) & ({{ports.addr}} == ({{data.addr}} + i));
      end
   endgenerate
{%   else %}
   assign {{data.name}} = (~prev_read & {{ports.read_strobe}}) & ({{ports.addr}} == {{data.addr}});
{%   endif %}   
{% endfor %}

/*
 * Output Assignments
 */
{% for data in oneshot_assigns %}
   assign {{data.name}} = {{data.value}};
{% endfor %}
{% for data in assign_list %}
{%   if data.dimension == "" %}
   assign {{data.output}} = {{data.register}};
{%   else %}
   generate
      for (i = 0; i < {{data.dimension}}; i++) begin : g_{{data.register}}
         assign {{data.output}}[i] = {{data.register}}[i];
      end
   endgenerate
{%   endif %}
{% endfor %}
   assign {{ports.read_data}} = mux_rdata;

{% for reg in db.get_all_registers() %}
{%   for field in reg.get_bit_fields() %}
{%     set ci = cell_info[field.field_type] %}

/*------------------------------------------------------------------------------
 * Field       : {{field.name}}
 * Type        : {{ci.type_descr}}
 * MSB         : {{field.msb.int_str()}}
 * LSB         : {{field.lsb}}
 * Register    : {{reg.name}}
 * Address     : {{"%08x" % reg.address}}
 * Reset Value : {{field.reset_string()}}
 *------------------------------------------------------------------------------
 */
{%     set bytes_per_word = db.ports.data_bus_width // 8 %}
{%     set baddr = (reg.address // bytes_per_word) * bytes_per_word %}
{%     set byte_offset = (reg.address % bytes_per_word) %}
{%     if byte_offset != 0 %}
{%       set byte_off_str = "+%d" % byte_offset %}
{%     else %}
{%       set byte_off_str = "" %}
{%     endif %}
{%     set faddr_str = "%02x" % reg.address + "_" + field.name %}
{%       if reg.dimension.is_parameter %}
{%         set dimval = "[dim]" %}
generate 
   for (dim = 0; dim < {{reg.dimension.param_name()}}; dim++) begin : g_r{{"%02x" % reg.address}}
{%       else %}
{%         set dimval = "" %}
{%       endif %}
{%     if field.field_type == 0 %}
    assign {{reg_field_name(reg, field)}}{{dimval}} = {{full_reset_value(field)}};
{%     elif field.field_type == 1 %}
{%       set rval = field.reset_input %}
    assign {{reg_field_name(reg, field)}}{{dimval}} = {{field.reset_input}}{{dimval}};
{%     else %}
{%       if field.msb.is_parameter or field.msb.resolve() > field.lsb %}
{%         set pos = "[bitpos]" %}
{%         set rval = "pRST%s" % faddr_str %}
{%         if byte_offset == 0 %}
{%           set bytepos = "bitpos >> 3" %}
{%           set wpos = "[bitpos]" %}
{%         else %}
{%           set bytepos = "(bitpos >> 3)+%d" % byte_offset %}
{%           set wpos = "[bitpos+%d]" % (byte_offset * 8,) %}
{%         endif %}

{% if field.reset_type != 1 %}
localparam bit [{{field.msb.int_str()}}:{{field.lsb}}] {{rval}} = {{field.reset_vstr()}};
{%         set generate = 1 %}
{%         set rval = field.reset_input %}
{% else %}
{%         set rval = field.reset_vstr() %}
{% endif %}
generate
   for (bitpos = {{field.lsb}}; bitpos <= {{field.msb.int_str()}}; bitpos++) begin : g{{faddr_str.lower()}}
{%       else %}
{%         set generate = 0 %}
{%         set pos = "" %}
{%         set bytepos = "%d" % ((field.lsb // 8) + byte_offset,) %}
{%         set wpos = "[%d]" % (field.lsb + byte_offset * 8,) %}
{%       endif %}      
{%     set reg_start_bit = ((reg.address * 8) % db.ports.data_bus_width) %}
   {{db.name}}_{{ci.name}}_reg {{reg_field_name(reg, field)}}_reg
     (
      .CLK   ({{ports.clk}}),
{% if db.ports.secondary_reset and field.use_alternate_reset %}
  {% if db.ports.sync_reset %}
      .RST   ({{ports.alt_reset}}),
  {% else %}
      .RSTn  ({{ports.alt_reset}}),
  {% endif %}
{% else %}
  {% if db.ports.sync_reset %}
      .RST   ({{ports.reset}}),
  {% else %}
      .RSTn  ({{ports.reset}}),
  {% endif %}
{% endif %}      
      .RVAL  ({{rval}}{{pos}}),
{%       if ci.is_read_only == False %}
      .WE    (write_r{{"%02x" % baddr}}{{dimval}}),
      .DI    ({{ports.write_data}}{{wpos}}),
      .BE    ({{ports.byte_strobe}}[{{bytepos}}]),
{%       endif %}
{%       if ci.has_rd %}
      .RD    (read_r{{"%02x" % reg.address}}),
{%       endif %}
{%       if ci.has_control %}
      .LD    ({{field.control_signal}}{{dimval}}),
{%       endif %}
{%       if ci.has_input %}
      .IN    ({{field.input_signal}}{{dimval}}{{pos}}),
{%       endif %}
{%       if ci.has_oneshot %}
      .DO_1S ({{reg_field_name(reg, field)}}_1S{{pos}}),
{%       endif %}
      .DO    ({{reg_field_name(reg, field)}}{{dimval}}{{pos}})
     );
{%     endif %}
{%     if field.field_type == 0 or field.msb.is_parameter or field.msb.resolve() > field.lsb %}
{% if generate == 1 %}    
    end
 endgenerate
{% endif %}
{%     endif %}

{%   endfor %}
{% endfor %}

/*------------------------------------------------------------------------------
 * Ensure that internal write is one clock wide
 *------------------------------------------------------------------------------
 */
{% if db.ports.sync_reset %}
   {{lang.always}} @(posedge {{ports.clk}}) begin
{% else %}
   {{lang.always}} @(posedge {{ports.clk}} or {{reset_edge}} {{ports.reset}}) begin
{% endif %}
     if ({{reset_op}}{{ports.reset}}) begin
        prev_write <= 1'b0;
        prev_read  <= 1'b0;
        {{ports.ack}} <= 1'b0;
     end else begin
        prev_write <= {{ports.write_strobe}};
        prev_read  <= {{ports.read_strobe}};
        {{ports.ack}} <= (~prev_write & {{ports.write_strobe}}) | (~prev_read & {{ports.read_strobe}});
     end
   end

/*------------------------------------------------------------------------------
 *
 * Register Read Output Assignments
 *
 *------------------------------------------------------------------------------
 */

{% for wire in reg_read_output %}
   assign {{wire.name}} = {
   {% for obj in wire.field_list %}
      {{obj}}{% if not loop.last %},{% endif %}

   {% endfor %}
   };

{% endfor %}
   {% set bit_width = db.ports.address_bus_width - low_bit %}
   
{% if db.ports.sync_reset %}
   {{lang.always}} @(posedge {{ports.clk}}) begin
{% else %}
   {{lang.always}} @(posedge {{ports.clk}} or {{reset_edge}} {{ports.reset}}) begin
{% endif %}
      if ({{reset_op}}{{ports.reset}}) begin
         mux_rdata <= '0;
      end else begin
         if ({{ports.read_strobe}}) begin
{% for addr, val in word_fields|dictsort %}
{%   if loop.first %}
            unique if ({{ports.addr}} == {{bit_width}}'h{{"%x"|format(rshift(addr, low_bit))}}) begin
{%-   else %}	   
            end else if ({{ports.addr}} == {{bit_width}}'h{{"%x"|format(rshift(addr, low_bit))}}) begin
{%-   endif %}	   
               mux_rdata <= r{{"%02x"|format(addr)}};
{%- endfor %}

            end else begin
	       mux_rdata <= {{db.ports.data_bus_width}}'h0;
            end
         end
      end
   end

endmodule
