// Author: {{db.owner}}
// Block: {{db.module_name}}
//
// ----------------------------------------------------------------------
// Functional Description
//
//   Provides a block of registers and their associated input and output
//   signals
// ----------------------------------------------------------------------
//
// Copyright 2016 {{db.organization}}. All rights reserved.
//
//
//
module {{db.module_name}}
{% if parameters|length > 0 %}
   #(
{%   for p in parameters %}
{%     if p[0] == p[1] %}
    parameter bit {{p[2]}} = 0{% if not loop.last %},{% endif %}

{%     else %}
    parameter bit [{{p[0]}}:{{p[1]}}] {{p[2]}} = 0{% if not loop.last %},{% endif %}

{%     endif %}
{%   endfor %}
    )
{% endif %}
   (
{% if not db.use_interface %}
    {{input_logic}} {{ports['clk']}},
    {{input_logic}} {{ports['reset']}},
    {{input_logic}} {{ports['write_strobe']}},
    {{input_logic}} {{ports['read_strobe']}},
    {{input_logic}} {{port_width['byte_strobe']}} {{ports['byte_strobe']}},
    {{input_logic}} {{port_width['addr']}} {{ports['addr']}},
    {{input_logic}} {{port_width['write_data']}} {{ports['write_data']}},
{% endif %}
{% for (signal, vector) in input_signals %}
    {{input_logic}} {{vector}} {{signal}},
{% endfor %}
{% for (signal, vector) in output_signals %}
    {{output_logic}} {{vector}} {{signal}},
{% endfor %}
{% if db.use_interface %}
    mgmt_interface.target MGMT
{% else %}
    {{output_logic}} {{"[%d:0]"|format(db.data_bus_width-1)}} {{ports['read_data']}},
    {{output_logic}} {{ports['ack']}}
{% endif %}
   );

/*
 * Register Declarations
 */
{% for r in reg_list %}
   {{reg_type}} {{r[1]}} {{r[0]}};
{% endfor %}
   {{reg_type}} prev_write;
   {{reg_type}} prev_read;
   {{reg_type}} [{{db.data_bus_width-1}}:0] mux_rdata;

/*
 * Address Selects
 */
{% for data in write_address_selects %}
   wire {{data[0]}} = (~prev_write & {{ports['write_strobe']}}) & ({{ports['addr']}} == {{data[1]}});
{% endfor %}
{% for data in read_address_selects %}
   wire {{data[0]}} = (~prev_read & {{ports['read_strobe']}}) & ({{ports['addr']}} == {{data[1]}});
{% endfor %}

/*
 * Output Assignments
 */
{% for data in oneshot_assigns %}
   assign {{data[0]}} = {{data[1]}};
{% endfor %}
{% for data in assign_list %}
   assign {{data[0]}} = {{data[1]}};
{% endfor %}
   assign {{ports['read_data']}} = mux_rdata;

{% for addr, val in word_fields|dictsort %}
{%   for (field, start_offset, stop_offset, start_pos, stop_pos, faddr, reg) in val %}
{%     if reg.share == 0 %}
{%       set mode = "_" %}
{%     elif reg.share == 1 %}
{%       set mode = "_r_" %}
{%     else %}
{%       set mode = "_w_" %}
{%     endif %}
{% set ci = cell_info[field.field_type] %}
/*------------------------------------------------------------------------------
 *    Field       : {{field.field_name}}
 *    Type        : {{ci.type_descr}}
{%     if stop_pos == start_pos %}
 *    Bit         : {{start_pos}}
{% else %}
 *    Bits        : {{stop_pos}}:{{start_pos}}
{% endif %}
 *    Register    : {{reg.register_name}}
 *    Address     : {{"%08x"|format(reg.address)}}
{%     if field.reset_type == 0 %}
 *    Reset Value : {{field.width}}'h{{"%x"|format(field.reset_value)}}
{%     elif field.reset_type == 1 %}
 *    Reset Value : {{field.reset_input}}
{%     else %}
 *    Reset Value : {{field.reset_value}}
{%     endif %}
 *------------------------------------------------------------------------------
 */
{%   if field.field_type == 0 %}
    assign r{{"%02x"|format(reg.address)}}{{mode}}{{field.field_name|lower}} = {{full_reset_value(field)}};
{%   elif field.field_type == 1 %}
{%     if reg.dimension >= 0 %}
    assign r{{"%02x"|format(reg.address)}}{{mode}}{{field.field_name|lower}} = {{field.input_signal}}[{{reg.dimension}}];
{%     else %}
    assign r{{"%02x"|format(reg.address)}}_{{field.field_name|lower}} = {{field.input_signal}};
{%     endif %}
{%   else %}
{%     for start, stop in break_into_bytes(field.lsb, field.msb) %}
{%        set reg_start_bit = ((reg.address * 8)|int % db.data_bus_width)|int %}
{%        set bus_start = (start % db.data_bus_width)|int + reg_start_bit %}
{%        set bus_stop = (stop % db.data_bus_width)|int + reg_start_bit %}
   {{db.module_name}}_{{ci.name}}_reg
     #(
{%      if ci.allows_wide %}
       .WIDTH ({{stop - start + 1}}),
{%      endif %}
       .RVAL  ({{reset_value(field, start, stop)}})
       )
   r{{"%02x"|format(reg.address)}}{{mode}}{{field.field_name|lower}}_{{start}}
     (
      .CLK    ({{ports['clk']}}),
      .RSTn   ({{ports['reset']}}),
{%      if ci.is_read_only == False %}
      .WE     (write_r{{"%02x"|format(addr|int)}}),
{%        if bus_stop == bus_start %}
      .DI     ({{ports['write_data']}}[{{bus_start}}]),
{%        else %}
      .DI     ({{ports['write_data']}}[{{bus_stop}}:{{bus_start}}]),
{%        endif %}
      .BE     ({{ports['byte_strobe']}}[{{(bus_start / 8)|int}}]),
{%      endif %}
{%      if ci.has_rd %}
      .RD     (read_r{{"%02x"|format(addr|int)}}),
{%      endif %}
{%      if ci.has_control %}
{%        if reg.dimension >= 0 %}
      .LD     ({{field.control_signal}}[{{reg.dimension}}]),
{%        else %}
      .LD     ({{field.control_signal}}),
{%        endif %}
{%      endif %}
{%      if ci.has_input %}
{%        if stop == start %}
{%          if reg.dimension >= 0 %}
      .IN     ({{field.input_signal}}[{{reg.dimension}}]),
{%          else %}
{%            if field.lsb == field.msb %}
      .IN     ({{field.input_signal}}),
{%            else %}
      .IN     ({{field.input_signal}}[{{start}}]),
{%            endif %}
{%          endif %}
{%        else %}
{%          if reg.dimension >= 0 %}
      .IN     ({{field.input_signal}}[{{reg.dimension}}][{{stop}}:{{start}}]),
{%          else %}
      .IN     ({{field.input_signal}}[{{stop}}:{{start}}]),
{%          endif %}
{%        endif %}
{%      endif %}
{%      if ci.has_oneshot %}
      .DO_1S  (r{{"%02x"|format(reg.address)}}{{mode}}{{field.field_name|lower}}_{{start}}_1S),
{%      endif %}
{%      if stop == start %}
{%        if field.lsb == field.msb %}
      .DO     (r{{"%02x"|format(reg.address)}}{{mode}}{{field.field_name|lower}})
{%        else %}
      .DO     (r{{"%02x"|format(reg.address)}}{{mode}}{{field.field_name|lower}}[{{start}}])
{%        endif %}
{%      else %}
      .DO     (r{{"%02x"|format(reg.address)}}{{mode}}{{field.field_name|lower}}[{{stop}}:{{start}}])
{%      endif %}
     );

{%     endfor %}
{%   endif %}
{%   endfor %}
{% endfor %}
/*------------------------------------------------------------------------------
 * Ensure that internal write is one clock wide
 *------------------------------------------------------------------------------
 */
   {{always}} @(posedge {{ports['clk']}} or {{reset_edge}} {{ports['reset']}}) begin
     if ({{reset_op}}{{ports['reset']}}) begin
        prev_write <= 1'b0;
        prev_read  <= 1'b0;
        {{ports['ack']}} <= 1'b0;
     end else begin
        prev_write <= {{ports['write_strobe']}};
        prev_read  <= {{ports['read_strobe']}};
        {{ports['ack']}} <= (~prev_write & {{ports['write_strobe']}}) | (~prev_read & {{ports['read_strobe']}});
     end
   end

/*------------------------------------------------------------------------------
 *
 * Register Read Output Assignments
 *
 *------------------------------------------------------------------------------
 */
{% for addr, val in word_fields|dictsort %}
{%-   set vars = {'last': db.data_bus_width - 1} -%}
   wire [{{db.data_bus_width-1}}:0] r{{"%02x"|format(addr|int)}} = {
{%   for (field, start_offset, stop_offset, start_pos, stop_pos, faddr, reg) in val|reverse|drop_write_share %}{%    set width = stop_pos - start_pos + 1 %}
{%     if reg.share == 0 %}
{%       set mode = "_" %}
{%     elif reg.share == 1 %}
{%       set mode = "_r_" %}
{%     else %}
{%       set mode = "_w_" %}
{%     endif %}
{%     if reg.share != 2 %}
{%       if start_offset + width <= vars.last %}
                  {{vars.last - (start_offset + width) + 1}}'b0,
{%       endif %}
{%       if start_pos == stop_pos %}
                  r{{"%02x"|format(reg.address)}}{{mode}}{{field.field_name|lower}}{% if start_pos + start_offset != 0 %},{% endif %}
{%       else %}
                  r{{"%02x"|format(reg.address)}}{{mode}}{{field.field_name|lower}}[{{stop_pos}}:{{start_pos}}]{% if start_pos + start_offset != 0 %},{% endif %}
{%       endif %}

{%       if vars.update({'last' : start_offset - 1})%}{% endif %}
{%       if loop.last and start_offset != 0 %}
                  {{start_offset}}'b0
{%       endif %}
{%     endif %}
{%   endfor %}
                  };
{% endfor %}

   {{always}} @(posedge {{ports['clk']}} or {{reset_edge}} {{ports['reset']}}) begin
      if ({{reset_op}}{{ports['reset']}}) begin
         mux_rdata <= '0;
      end else begin
        if ({{ports['read_strobe']}}) begin
           unique case ({{ports['addr']}})
{% for addr, val in word_fields|dictsort %}
              {{db.address_bus_width - LOWER_BIT[db.data_bus_width]}}'h{{"%x"|format(rshift(addr|int, LOWER_BIT[db.data_bus_width]))}}: mux_rdata <= r{{"%02x"|format(addr|int)}};
{% endfor %}
              default: mux_rdata <= '0;
           endcase
         end else begin
            mux_rdata <= '0;
         end
      end
   end

endmodule


