#! /usr/bin/env python
#
# Manage registers in a hardware design
#
# Copyright (C) 2008  Donald N. Allingham
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

"""
Actual program. Parses the arguments, and initiates the main window
"""

import os
import sys
from regenerate.db.reg_project import RegProject
from regenerate.db.register_db import RegisterDb

if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.path.join(os.getcwd(),os.path.dirname(sys.argv[0]))
else:
    fullPath = os.getcwd()
sys.path.insert(0, os.path.dirname(fullPath))


def run():
    """
    main program
    """
    from optparse import OptionParser
    import regenerate.writers
    from regenerate import PROGRAM_VERSION
    import sys

    parser = OptionParser(
        usage="%prog [project file]",
        description="Opens and saves all register sets in the project, updating the files",
        prog="regupdate",
        version=PROGRAM_VERSION
        )

    (options, args) = parser.parse_args()

    if len(args) != 1:
        parser.print_help()
        sys.exit(1)

    project = RegProject(args[0])


    db_list = [(item, RegisterDb(item)) for item in project.get_register_set()]

    for (name, db) in db_list:
        print("Updating {0}".format(name))
        db.save_xml(name)


if __name__ == "__main__":
    try:
        run()
        sys.exit(0)
    except IOError, msg:
        sys.stderr.write(str(msg) + "\n")
        sys.exit(1)

