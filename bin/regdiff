#! /usr/bin/env python
#
# Manage registers in a hardware design
#
# Copyright (C) 2008  Donald N. Allingham
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

"""
Actual program. Parses the arguments, and initiates the main window
"""

import os
import sys
from regenerate.db.reg_project import RegProject
from regenerate.db.register_db import RegisterDb
from regenerate.db.bitfield_types import TYPE_TO_DESCR

if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.path.join(os.getcwd(),os.path.dirname(sys.argv[0]))
else:
    fullPath = os.getcwd()
sys.path.insert(0, os.path.dirname(fullPath))


def run():
    """
    main program
    """
    from argparse import ArgumentParser
    import regenerate.writers
    from regenerate import PROGRAM_VERSION
    import sys

    parser = ArgumentParser(
        description="Compares two project files, reporting differences",
        prog="regdiff",
        version=PROGRAM_VERSION
        )

    parser.add_argument("--verbose", action="store_true")
    parser.add_argument("old_project", help="Original project", type=str)
    parser.add_argument("new_project", help="Updated project", type=str)

    options = parser.parse_args()

    old_project = RegProject(options.old_project)
    new_project = RegProject(options.new_project)

    check_register_sets(old_project, new_project, options.verbose)

    compare_groupings(old_project.get_grouping_list(),
                      new_project.get_grouping_list())


def print_header(dbname):
    print("\n# {0} changed".format(dbname))


def check_registers(dbname, old_db, new_db):

    need_header = True

    or_map = dict((r.uuid, r) for r in old_db.get_all_registers())
    nr_map = dict((r.uuid, r) for r in new_db.get_all_registers())

    or_names = set(or_map.keys())
    nr_names = set(nr_map.keys())

    removed = or_names - nr_names
    added = nr_names - or_names
    common = or_names & nr_names

    if removed:
        if need_header:
            print_header(dbname)
            need_header = False
        print("\n## Registers removed")

        for uuid in removed:
            print("- {0} - address {1:x}".format(
                    or_map[uuid].register_name,
                    or_map[uuid].address))

    if added:
        if need_header:
            print_header(dbname)
            need_header = False
        print("\n## Registers added")

        for uuid in added:
            print("- {0} - address {1:x}".format(
                    nr_map[uuid].register_name,
                    nr_map[uuid].address))

    if common:
        for uuid in common:
            nreg = nr_map[uuid]
            oreg = or_map[uuid]
            if nreg != oreg:
                if need_header:
                    print_header(dbname)
                    need_header = False
                print("- {0} changed".format(nreg.register_name))
                dump_register_changes(nreg, oreg)


def dump_register_changes(new_reg, old_reg):

    if new_reg.register_name != old_reg.register_name:
        print('> - Name changed from "{0}" to "{1}"'.format(
                old_reg.register_name, new_reg.register_name))
    if new_reg.address != old_reg.address:
        print('> - Address changed from {0:x} to {1:x}'.format(
                old_reg.address, new_reg.address))
    if new_reg.ram_size != old_reg.ram_size:
        print('> - RAM size changed from {0:x} to {1:x}'.format(
                old_reg.ram_size, new_reg.ram_size))
    if new_reg.width != old_reg.width:
        print('> - Width changed from {0}-bits to {1}-bits'.format(
                old_reg.width, new_reg.width))
    if new_reg.description != old_reg.description:
        print('> - Description changed')
    if new_reg.do_not_generate_code != old_reg.do_not_generate_code:
        print('> - Code generation flag changed from {0} to {1}'.format(
                old_reg.do_not_generate_code, new_reg.do_not_generate_code))
    if new_reg.do_not_test != old_reg.do_not_test:
        print('> - Test suppression flag changed from {0} to {1}'.format(
                old_reg.do_not_test, new_reg.do_not_test))
    if new_reg.hide != old_reg.hide:
        print('> - Documentation suppression flag changed from {0} to {1}'.format(
                old_reg.hide, new_reg.hide))
    if new_reg.token != old_reg.token:
        print('> - Token changed from {0} to {1}'.format(
                old_reg.token, new_reg.token))

    old_field_ids = set([i.uuid for i in old_reg.get_bit_fields()])
    new_field_ids = set([i.uuid for i in new_reg.get_bit_fields()])

    old_fields = dict((i.uuid, i) for i in old_reg.get_bit_fields())
    new_fields = dict((i.uuid, i) for i in new_reg.get_bit_fields())

    removed = old_field_ids - new_field_ids
    for i in removed:
        print('> - Field "{0}" removed'.format(old_fields[i].field_name))

    added = new_field_ids - old_field_ids
    for i in added:
        print('> - Field "{0}" added'.format(new_fields[i].field_name))

    for uuid in old_field_ids & new_field_ids:
        dump_field_changes(old_fields[uuid], new_fields[uuid])
    

def dump_field_changes(ofld, nfld):
    
    if ofld.field_name != nfld.field_name:
        print('> - Field "{0}" renamed from "{1}"'.format(
                nfld.field_name, ofld.field_name))
    if (ofld.msb, ofld.lsb) != (nfld.msb, nfld.lsb):
        print('> - Field "{0}" bit fields changed from [{1}:{2}] to [{3}:{4}]'.format(
                nfld.field_name, ofld.msb, ofld.lsb,
                nfld.msb, nfld.lsb))

    if ofld.reset_type != nfld.reset_type:
        print('> - Field "{0}" reset type changed'.format(nfld.field_name))
    else:
        if ofld.reset_value != nfld.reset_value:
            print('> - Field "{0}" reset value changed from {1:x} to {2:X}'.format(
                    nfld.field_name, ofld.reset_value, nfld.reset_value))
        if ofld.reset_input != nfld.reset_input:
            print('> - Field "{0}" reset input value changed from "{1}" to "{2}"'.format(
                    nfld.field_name, ofld.reset_input, nfld.reset_input))
        if ofld.reset_parameter != nfld.reset_parameter:
            print('> - Field "{0}" reset parameter value changed from "{1}" to "{2}"'.format(
                    nfld.field_name, ofld.reset_input, nfld.reset_input))

    if ofld.use_output_enable != nfld.use_output_enable:
        print('> - Field "{0}" output enable changed from {1} to {2}'.format(
                nfld.field_name, ofld.use_output_enable,
                nfld.use_output_enable))
    elif ofld.output_signal != nfld.output_signal:
        print('> - Field "{0}" output signal changed from "{1}" to "{2}"'.format(
                nfld.field_name, ofld.output_signal, nfld.output_signal))
        
    if ofld.description != nfld.description:
        print('> - Field "{0}" documentation changed'.format(nfld.field_name))

    if ofld.field_type != nfld.field_type:
        print('> - Field "{0}" changed from "{1}" to "{2}"'.format(
                nfld.field_name, TYPE_TO_DESCR[ofld.field_type],
                TYPE_TO_DESCR[nfld.field_type]))

    if ofld.volatile != nfld.volatile:
        print('> - Field "{0}" volatile flag changed from {1} to {2}'.format(
                nfld.field_name, ofld.volatile, nfld.volatile))

    if ofld.control_signal != nfld.control_signal:
        print('> - Field "{0}" control signal changed from "{1}" to "{2}"'.format(
                nfld.field_name, ofld.control_signal, nfld.control_signal))

    if ofld.output_is_static != nfld.output_is_static:
        print('> - Field "{0}" output static flag changed from {1} to {2}'.format(
                nfld.field_name, ofld.output_is_static,
                nfld.output_is_static))

    if ofld.output_has_side_effect != nfld.output_has_side_effect:
        print('> - Field "{0}" output side effect flag changed from {1} to {2}'.format(
                nfld.field_name, ofld.output_has_side_effect,
                nfld.output_has_side_effect))

    if ofld.values != nfld.values:
        print('> - Field "{0}" value definitions changed'.format(
                nfld.field_name))
        

def check_register_sets(old_project, new_project, verbose):

    old_list = [RegisterDb(item) for item in old_project.get_register_set()]
    new_list = [RegisterDb(item) for item in new_project.get_register_set()]

    old_set = set([item.set_name for item in old_list])
    new_set = set([item.set_name for item in new_list])

    removed = old_set - new_set
    added = new_set - old_set

    if removed or added:
        print("\n# Register Sets")

    if removed:
        print("\n## Register sets removed")
        for s in sorted(removed):
            print("- {0}".format(s))

    if added:
        print("\n##Register sets added")
        for s in sorted(added):
            print("- {0}".format(s))

    common = new_set & old_set

    if verbose:
        print("\n##Register sets that did not change")
        for s in sorted(common):
            print("- {0}".format(s))

    old_dbs = dict((db.set_name, db) for db in old_list
                   if db.set_name in common)

    new_dbs = dict((db.set_name, db) for db in new_list
                   if db.set_name in common)

    for dbname in common:
        check_registers(dbname, old_dbs[dbname], new_dbs[dbname])


def compare_groupings(old_list, new_list):

    old_names = set([g.name for g in old_list])
    new_names = set([g.name for g in new_list])

    added_names = new_names - old_names
    removed_names = old_names - new_names
    common_names = new_names & old_names

    old_common = dict((grp.name, grp) for grp in old_list)
    new_common = dict((grp.name, grp) for grp in new_list)

    if added_names or removed_names:
        print("# Groups")

    if added_names:
        print("\n## Groups added")
        for s in sorted(added_names):
            print("- {0}".format(s))

    if removed_names:
        print("## Groups removed")
        for s in sorted(removed_names):
            print("- {0}".format(s))

    header = False
    for name in common_names:
        o = old_common[name]
        n = new_common[name]

        if o == n:
            continue

        if not header:
            print("\n## Groups that changed")
            header = True
        print("### {0}".format(name))

        if o.base != n.base:
            print("- Base changed from {0:x} to {1:x}".format(o.base, n.base))
        if o.hdl != n.hdl:
            print('- HDL path changed from "{0}" to "{1}"'.format(o.hdl, n.hdl))
        if o.repeat != n.repeat:
            print("- Repeat changed from {0} to {1}".format(o.repeat, n.repeat))
        if o.repeat_offset != n.repeat_offset:
            print("- Repeat offset changed from {0:x} to {1:x}".format(
                    o.repeat_offset, n.repeat_offset))
        if o.docs != n.docs:
            print("- Documentation changed")

        o_set_names = set([x.set for x in o.register_sets])
        n_set_names = set([x.set for x in n.register_sets])

        removed_sets = o_set_names - n_set_names
        if removed_sets:
            print("- Register set removed : {0}".format(", ".join(list(removed_sets))))

        added_sets = n_set_names - o_set_names
        if added_sets:
            print("- Register set added : {0}".format(", ".join(list(added_sets))))

        common_sets = o_set_names & n_set_names

        old_dict = dict((nmp.set, nmp) for nmp in o.register_sets
                        if nmp.set in common_sets)

        new_dict = dict((nmp.set, nmp) for nmp in n.register_sets
                        if nmp.set in common_sets)

        hdr = False
        for n in common_sets:
            ng = new_dict[n]
            og = old_dict[n]

            if ng != og:
                if hdr == False:
                    print('\n#### Changed Register sets')
                    hdr = True
                print("- {0}".format(n))

                if ng.inst != og.inst:
                    print("> - Instance name changed from {0} to {1}".format(
                            og.inst, ng.inst))
                if ng.offset != og.offset:
                    print("> - Instance offset changed from {0:x} to {1:x}".format(
                            og.offset, ng.offset))
                if ng.repeat != og.repeat:
                    print("> - Instance repeat changed from {0} to {1}".format(
                            og.repeat, ng.repeat))
                if ng.repeat_offset != og.repeat_offset:
                    print("> - Instance repeat offset changed from {0} to {1}".format(
                            og.repeat_offset, ng.repeat_offset))
                if ng.format != og.format:
                    print('> - Instance format changed from "{0}" to "{1}"'.format(
                            og.format, ng.format))
                if ng.hdl != og.hdl:
                    print('> - Instance HDL path changed from "{0}" to "{1}"'.format(
                            og.hdl, ng.hdl))
                if ng.no_uvm != og.no_uvm:
                    print('> - Instance UVM exclude changed from "{0}" to "{1}"'.format(
                            og.no_uvm, ng.no_uvm))

        print("")


if __name__ == "__main__":
    try:
        run()
        sys.exit(0)
    except IOError, msg:
        sys.stderr.write(str(msg) + "\n")
        sys.exit(1)

