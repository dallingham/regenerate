#! /usr/bin/env python
#
# Manage registers in a hardware design
#
# Copyright (C) 2008  Donald N. Allingham
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

"""
Actual program. Parses the arguments, and initiates the main window
"""

import os
import sys
from regenerate.db.reg_project import RegProject
from regenerate.db.register_db import RegisterDb

if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.path.join(os.getcwd(), os.path.dirname(sys.argv[0]))
else:
    fullPath = os.getcwd()
sys.path.insert(0, os.path.dirname(fullPath))


import re


def crossreference(db):
    names = sorted(
        [reg.name for reg in db.get_all_registers()], key=len, reverse=True
    )

    re_list = [r"([^`])({0}) ((R|r)egister)".format(name) for name in names]

    rcount = 0
    fcount = 0
    count = 0

    for regex in re_list:
        match = re.search(regex, db.overview_text)
        if match:
            print match
            db.overview_text = re.sub(regex, r"\1`\2`_ \3", db.overview_text)
            count += 1

    for reg in db.get_all_registers():
        print "Checking %s" % reg.name
        for regex in re_list:
            match = re.search(regex, reg.description)
            if match:
                reg.description = re.sub(regex, r"\1`\2`_ \3", reg.description)
                rcount += 1
        for field in reg.get_bit_fields():
            for regex in re_list:
                match = re.search(regex, field.description)
                if match:
                    field.description = re.sub(
                        regex, r"\1`\2`_ \3", field.description
                    )
                    fcount += 1

    print "---------------------------------"
    print "Top level doc xrefs: {0}".format(count)
    print "Register xrefs     : {0}".format(rcount)
    print "Field xrefs        : {0}".format(fcount)

    return count + rcount + fcount


def run():
    """
    main program
    """
    from optparse import OptionParser
    import regenerate.writers
    from regenerate import PROGRAM_VERSION
    import sys

    parser = OptionParser(
        usage="%prog [xml file]",
        description="Opens and saves a register set, making crossreferences in the text",
        prog="regxref",
        version=PROGRAM_VERSION,
    )

    (options, args) = parser.parse_args()

    if len(args) != 1:
        parser.print_help()
        sys.exit(1)

    db = RegisterDb(args[0])
    if crossreference(db):
        db.save_xml(args[0])


if __name__ == "__main__":
    try:
        run()
        sys.exit(0)
    except IOError, msg:
        sys.stderr.write(str(msg) + "\n")
        sys.exit(1)
