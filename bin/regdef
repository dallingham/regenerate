#! /usr/bin/env python
#
# Manage registers in a hardware design
#
# Copyright (C) 2008  Donald N. Allingham
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

"""
Actual program. Parses the arguments, and initiates the main window
"""

import os
import sys
from regenerate.db.reg_project import RegProject
from regenerate.db.register_db import RegisterDb

if os.path.dirname(sys.argv[0]) != ".":
    if sys.argv[0][0] == "/":
        fullPath = os.path.dirname(sys.argv[0])
    else:
        fullPath = os.path.join(os.getcwd(),os.path.dirname(sys.argv[0]))
else:
    fullPath = os.getcwd()
sys.path.insert(0, os.path.dirname(fullPath))


def run():
    """
    main program
    """
    from optparse import OptionParser
    import regenerate.writers
    from regenerate import PROGRAM_VERSION
    import sys

    parser = OptionParser(
        usage="%prog [register file]",
        description="Creates a C define file for bit fields",
        prog="regdef",
        version=PROGRAM_VERSION
        )

    (options, args) = parser.parse_args()

    if len(args) != 2:
        parser.print_help()
        sys.exit(1)

    db = RegisterDb(args[0])

    field_count = {}
    field_current = {}
    length = 0
    for reg in db.get_all_registers():
        for field in reg.get_bit_fields():
            name = field.field_name.strip()
            if (name.startswith("OBSOLETE") or
                name.startswith("RESERVED")):
                continue
            else:
                length = max(length, len(name))
                field_count[name] = field_count.get(name, 0) + 1

    space = length + len("_OFFSET ")

    with open(args[1], "w") as ifile:
        for reg in db.get_all_registers():
            for field in reg.get_bit_fields():
                fname = field.field_name.strip()
                if (fname.startswith("OBSOLETE") or
                    fname.startswith("RESERVED")):
                    continue
                
                if field_count[fname] != 1:
                    current = field_current.get(fname, 0)
                    field_current[fname] = current + 1
                    fname = "{0}_{1}".format(fname, current)

                name = "{0}_ADDR".format(fname)

                address = int(reg.token.split('_')[2])
                ifile.write("#define {name:{fill}} ({address})\n".format(
                        name=name, fill=space, address=address))

                mask = 0L
                for i in range(field.lsb, field.msb+1):
                    mask |= 1L << i

                name = "{0}_MASK".format(fname)
                ifile.write("#define {name:{fill}} (0x{mask:x}ULL)\n".format(
                        name=name, fill=space, mask=mask))

if __name__ == "__main__":
    try:
        run()
        sys.exit(0)
    except IOError, msg:
        sys.stderr.write(str(msg) + "\n")
        sys.exit(1)

